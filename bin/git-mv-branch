#!/bin/bash

FROM_BRANCH=${1:-master}
TO_BRANCH=${2:-main}
REMOTE="origin"

git ls-remote --exit-code origin > /dev/null 2>&1
HAS_ORIGIN=$?

set -e

# Check for 0 or 2 arguments
if [[ $# != 0 && $# != 2 ]]; then
  echo "Error: Invalid number of arguments. git migrate-branch from to (defaults master -> main)"
  exit 1
fi

# Check your current branch status
if [[ $(git status -uno -s | wc -c) -ne 0 ]]; then
  echo "Error: Branch is dirty, commit or stash your changes first!"
  exit 1
fi
echo "Branch is clean" &&

# Checkout deprecated branch
git checkout "$FROM_BRANCH"
echo "Checked out $FROM_BRANCH" &&

# Branch to new namespace
git checkout -b "$TO_BRANCH"
echo "Created branch $TO_BRANCH" &&

# Push to origin if it exists
if [[ $HAS_ORIGIN -eq 0  ]]; then
  git push -u "$REMOTE" "$TO_BRANCH"
  echo "Pushing new branch $TO_BRANCH to $REMOTE" &&
  :
fi


echo "It is reccommended to delete previous branch locally and on remote" &&
echo "Delete old branches locally and on remote? [y/N]"
read -r RESPONSE

# Clean up local branch
if [[ $RESPONSE =~ ^[Yy]$ ]]; then
  git branch -D "$FROM_BRANCH"
  echo "Deleted branch $FROM_BRANCH from local" &&
  :
fi

# Clean up local remote
if [[ $RESPONSE =~ ^[Yy]$ && $HAS_ORIGIN -eq 0 ]]; then
  git push $REMOTE --delete "$FROM_BRANCH"
  echo "Deleted branch $FROM_BRANCH from $REMOTE" &&
  :
fi

echo "Done: successfully migrated from $FROM_BRANCH to $TO_BRANCH"
